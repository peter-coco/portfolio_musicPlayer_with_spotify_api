{"version":3,"sources":["redux/actions.ts","components/navbar/navbar.tsx","components/footer/footer.tsx","components/main/main-genre.tsx","components/main/main-tracklist.tsx","components/main/main-trackListOnMode.tsx","components/utils/useAuth.ts","components/main/main-title.tsx","components/main/main.tsx","components/Dashboard.tsx","redux/reducer.ts","redux/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Actions","NavbarWrap","styled","div","NavbarMenusWrap","NavbarMenu","i","NavbarSearchBarWrap","NavbarSearchBarInput","input","NavbarMenus","dispatch","useDispatch","className","onClick","type","CHANGE_MAIN_CONTENTS_MODE_TO_MAIN","CHANGE_MAIN_CONTENTS_MODE_TO_GENRE","CHANGE_MAIN_CONTENTS_MODE_TO_SEARCH","payload","searchBarOnOff","NavbarSearchBar","onChange","e","SET_SEARCH_RESULT","searchResult","target","value","onKeyDown","key","SET_SEARCH_ENTER_ACTIVATED","Navbar","useSelector","state","onOutsideClick","FooterWrap","Footer","trackNow","accessTokenNow","useState","setPlay","useEffect","console","log","url","MainGenreWrap","MainGenreList","MainGenreLists","musicGenre","CHOICE_MUSIC_GENRE","genre","nameOfTitle","MainGenre","mainModeIdx","mainContentsModeIdx","style","display","map","MainMusicList","MainMusicListImg","img","MainMusicListSubscription","MainMusicListTitle","MainMusicListArtistNAlbum","MainMusicLists","track","spotifyApi","myListId","playingListId","src","albumImg","title","artist","album","MainMusicListWrap","MainTrackListOnMode","entraceCode","selectedMusicGenre","searchBarEnterOnOff","trackList","accessToken","code","setAcceessToken","setExpiresIn","axios","post","then","res","data","expiresIn","catch","SET_API_ENTRACE_CODE","apiEntraceCode","window","location","href","useAuth","setAccessToken","SET_ACCEES_TOKEN_NOW","searchTracks","list","body","tracks","items","name","artists","images","popularity","uri","SET_TRACK_LIST","getRecommendations","seed_genres","sort","a","b","MainContentsTitle","MainContentsTitleText","MainContentsTitleUnderbar","Maintitle","barColor","backgroundColor","MainWrap","MainContentsWrap","Main","colorOfTitleBar","BackgroundWrap","Dashboard","initialState","musicList","SpotifyWebApi","clientId","addMusicToMylist","subMusicFromMylist","reducer","action","CHANGE_MAIN_CONTENTS_MODE_TO_MYLIST","SET_MYLIST_ID","SET_PLAYING_NOW_LIST_ID","SET_ADD_MUSIC_TO_MYLIST","SET_SUB_MUSIC_FROM_MYLIST","CHOICE_PLAY_MUSIC_NOW","store","createStore","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3bc0d67b.chunk.js","sourcesContent":["enum Actions {\n  CHANGE_MAIN_CONTENTS_MODE_TO_MAIN,\n  CHANGE_MAIN_CONTENTS_MODE_TO_GENRE,\n  CHANGE_MAIN_CONTENTS_MODE_TO_MYLIST,\n  CHANGE_MAIN_CONTENTS_MODE_TO_SEARCH,\n  SET_API_ENTRACE_CODE,\n  SET_TRACK_LIST,\n  SET_SEARCH_RESULT,\n  SET_SEARCH_ENTER_ACTIVATED,\n  SET_ACCEES_TOKEN_NOW,\n  SET_MYLIST_ID,\n  SET_PLAYING_NOW_LIST_ID,\n  SET_ADD_MUSIC_TO_MYLIST,\n  SET_SUB_MUSIC_FROM_MYLIST,\n  CHOICE_MUSIC_GENRE,\n  CHOICE_PLAY_MUSIC_NOW,\n}\n\nexport default Actions;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport Actions from \"../../redux/actions\";\nimport { GlobalState, Music } from \"../../redux/reducer\";\nimport OnOutsiceClick from \"react-outclick\";\n\nconst NavbarWrap = styled.div`\n  width: 100%;\n  height: 10vh;\n  min-height: 60px;\n  /* position: absolute; */\n  /* top: 0; */\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst NavbarMenusWrap = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 560px;\n  height: 30px;\n  @media (max-width: 750px) {\n    width: 200px;\n  }\n`;\n\nconst NavbarMenu = styled.i`\n  font-size: 25px;\n  line-height: 30px;\n  color: #fff;\n  cursor: pointer;\n  transition: all 300ms ease;\n\n  @media (max-width: 750px) {\n    font-size: 20px;\n  }\n  @media (max-width: 350px) {\n    font-size: 15px;\n  }\n\n  &:hover {\n    /* color: red; */\n    transform: scale(1.2) rotate(-30deg);\n  }\n`;\n\nconst NavbarSearchBarWrap = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 300px;\n  height: 30px;\n\n  @media (max-width: 750px) {\n    width: 200px;\n  }\n`;\n\nconst NavbarSearchBarInput = styled.input`\n  width: 100%;\n  height: 100%;\n`;\n\nconst NavbarMenus = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <NavbarMenusWrap>\n      <NavbarMenu\n        className=\"fas fa-home\"\n        onClick={() => {\n          dispatch({\n            type: Actions.CHANGE_MAIN_CONTENTS_MODE_TO_MAIN,\n          });\n        }}\n      />\n      <NavbarMenu\n        className=\"fas fa-chart-bar\"\n        onClick={() => {\n          dispatch({\n            type: Actions.CHANGE_MAIN_CONTENTS_MODE_TO_GENRE,\n          });\n        }}\n      />\n      {/* <NavbarMenu\n        className=\"fas fa-list-alt\"\n        onClick={() => {\n          dispatch({\n            type: Actions.CHANGE_MAIN_CONTENTS_MODE_TO_MYLIST,\n          });\n        }}\n      /> */}\n      <NavbarMenu\n        className=\"fas fa-search\"\n        onClick={() => {\n          dispatch({\n            type: Actions.CHANGE_MAIN_CONTENTS_MODE_TO_SEARCH,\n            payload: { searchBarOnOff: true },\n          });\n        }}\n      />\n    </NavbarMenusWrap>\n  );\n};\n\nconst NavbarSearchBar = () => {\n  // const [inputText, setInputText] = useState(\"\");\n\n  const dispatch = useDispatch();\n  return (\n    <NavbarSearchBarWrap>\n      <NavbarSearchBarInput\n        onChange={(e) => {\n          dispatch({\n            type: Actions.SET_SEARCH_RESULT,\n            payload: { searchResult: e.target.value },\n          });\n        }}\n        onKeyDown={(e) => {\n          if (e.key === \"Enter\") {\n            dispatch({\n              type: Actions.SET_SEARCH_ENTER_ACTIVATED,\n            });\n          }\n        }}\n      />\n    </NavbarSearchBarWrap>\n  );\n};\n\nexport const Navbar = () => {\n  // const [a, b] = useSelector<GlobalState, [string, number]>((state) => [\n  //   state.a,\n  //   state.b,\n  // ]);\n  const searchBarOnOff = useSelector<GlobalState, boolean>(\n    (state) => state.searchBarOnOff\n  );\n  const dispatch = useDispatch();\n  return searchBarOnOff ? (\n    <NavbarWrap>\n      <OnOutsiceClick\n        onOutsideClick={() => {\n          dispatch({\n            type: Actions.CHANGE_MAIN_CONTENTS_MODE_TO_SEARCH,\n            payload: { searchBarOnOff: false },\n          });\n        }}\n      >\n        <NavbarSearchBar />\n      </OnOutsiceClick>\n    </NavbarWrap>\n  ) : (\n    <NavbarWrap>\n      <NavbarMenus />\n    </NavbarWrap>\n  );\n};\n","import styled from \"styled-components\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\nimport { useSelector } from \"react-redux\";\nimport { GlobalState, Music } from \"../../redux/reducer\";\nimport { useEffect, useState } from \"react\";\n\nconst FooterWrap = styled.div`\n  width: 100%;\n  height: 10vh;\n  min-height: 60px;\n`;\n\nexport const Footer = () => {\n  const trackNow = useSelector<GlobalState, Music>((state) => state.trackNow);\n  const [accessTokenNow] = useSelector<GlobalState, [string]>((state) => [\n    state.accessTokenNow,\n  ]);\n  const [play, setPlay] = useState(false);\n  useEffect(() => {\n    setPlay(true);\n    console.log(trackNow.url);\n  }, [trackNow.url]);\n\n  if (!accessTokenNow) return null;\n  return (\n    <FooterWrap>\n      {/* <SpotifyPlayer\n        // style={{ width: \"100%\", height: \"10vh\" }}\n        token={accessTokenNow}\n        showSaveIcon\n        callback={(state) => {\n          if (!state.isPlaying) setPlay(false);\n        }}\n        play={play}\n        uris={trackNow.url ? [trackNow.url] : []}\n      /> */}\n    </FooterWrap>\n  );\n};\n","import styled from \"styled-components\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { GlobalState } from \"../../redux/reducer\";\nimport Actions from \"../../redux/actions\";\n\nconst MainGenreWrap = styled.div`\n  width: 100%;\n  height: 80%;\n  grid-template-columns: 1fr 1fr 1fr;\n  overflow-y: scroll;\n\n  @media (max-width: 750px) {\n    grid-template-columns: 1fr 1fr;\n  }\n`;\n\nconst MainGenreList = styled.div`\n  width: 200px;\n  height: 50px;\n  background-color: #1b1b1b;\n  color: #fff;\n  /* margin-right: 50px; */\n  text-align: center;\n  line-height: 50px;\n  font-size: 16px;\n\n  cursor: pointer;\n  @media (max-width: 750px) {\n    width: 130px;\n    height: 40px;\n    line-height: 40px;\n    font-size: 15px;\n\n    /* margin-right: 30px; */\n  }\n\n  @media (max-width: 350px) {\n    width: 100px;\n    height: 30px;\n    line-height: 30px;\n    font-size: 13px;\n  }\n`;\n\nconst MainGenreLists = ({ musicGenre }: { musicGenre: string }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <MainGenreList\n      onClick={() => {\n        // go to Genre music lists\n        // console.log(`click genre : ${musicGenre}`);\n        dispatch({\n          type: Actions.CHOICE_MUSIC_GENRE,\n          payload: { genre: musicGenre, nameOfTitle: musicGenre },\n        });\n      }}\n    >\n      {musicGenre}\n    </MainGenreList>\n  );\n};\n\nexport const MainGenre = () => {\n  const genreLists = [\n    \"k-pop\",\n    \"pop\",\n    \"j-pop\",\n    \"rock\",\n    \"classical\",\n    \"jazz\",\n    \"dance\",\n    \"edm\",\n    \"acoustic\",\n  ];\n\n  const mainModeIdx = useSelector<GlobalState>(\n    (state) => state.mainContentsModeIdx\n  );\n\n  return (\n    <MainGenreWrap style={{ display: mainModeIdx === 1 ? \"grid\" : \"none\" }}>\n      {genreLists.map((musicGenre) => (\n        <MainGenreLists key={musicGenre} musicGenre={musicGenre} />\n      ))}\n    </MainGenreWrap>\n  );\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { GlobalState, Music } from \"../../redux/reducer\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport Actions from \"../../redux/actions\";\n\nconst MainMusicList = styled.div`\n  width: 100%;\n  height: 80px;\n  display: flex;\n  position: relative;\n  align-items: center;\n  margin-right: 30px;\n  @media (max-width: 750px) {\n    width: 100%;\n    height: 40px;\n    margin-bottom: 20px;\n    margin-right: 0%;\n  }\n  @media (max-width: 350px) {\n    height: 35px;\n    margin-bottom: 15px;\n  }\n`;\nconst MainMusicListImg = styled.img`\n  width: 50px;\n  height: 50px;\n  margin-right: 20px;\n  @media (max-width: 750px) {\n    width: 40px;\n    height: 40px;\n    margin-right: 20px;\n  }\n  @media (max-width: 350px) {\n    width: 35px;\n    height: 35px;\n    margin-right: 15px;\n  }\n`;\nconst MainMusicListSubscription = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nconst MainMusicListTitle = styled.div`\n  color: #fff;\n  font-size: 18px;\n  /* width: 300px; */\n\n  width: 200px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n\n  @media (max-width: 750px) {\n    font-size: 15px;\n    width: 220px;\n  }\n\n  @media (max-width: 350px) {\n    font-size: 13px;\n    width: 150px;\n  }\n`;\nconst MainMusicListArtistNAlbum = styled.div`\n  color: #cacaca;\n  font-size: 18px;\n\n  width: 200px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  /* width: 100%; */\n  @media (max-width: 750px) {\n    font-size: 15px;\n    width: 220px;\n  }\n\n  @media (max-width: 350px) {\n    font-size: 13px;\n    width: 150px;\n  }\n`;\n\nexport const MainMusicLists = ({ track }: { track: Music }) => {\n  const dispatch = useDispatch();\n  const [spotifyApi, myListId, playingListId] = useSelector<\n    GlobalState,\n    [SpotifyWebApi, string, string]\n  >((state) => [state.spotifyApi, state.myListId, state.playingListId]);\n\n  return (\n    <MainMusicList>\n      <MainMusicListImg src={track.albumImg} />\n      <MainMusicListSubscription>\n        <MainMusicListTitle>{track.title}</MainMusicListTitle>\n        <MainMusicListArtistNAlbum>\n          {track.artist} / {track.album}\n        </MainMusicListArtistNAlbum>\n      </MainMusicListSubscription>\n    </MainMusicList>\n  );\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { GlobalState, Music } from \"../../redux/reducer\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\n\nimport useAuth from \"../utils/useAuth\";\nimport Actions from \"../../redux/actions\";\nimport { MainMusicLists } from \"./main-tracklist\";\n\nconst MainMusicListWrap = styled.div`\n  width: 100%;\n  height: 80%;\n\n  grid-template-columns: repeat(auto-fill, minmax(50%, auto));\n  grid-template-rows: 1fr;\n  overflow-y: scroll;\n  /* overflow-x: hidden; */\n\n  @media (max-width: 750px) {\n    grid-template-columns: 1fr;\n    /* grid-template-rows: repeat(auto-fill, minmax(50%, auto)); */\n  }\n`;\n\nexport const MainTrackListOnMode = () => {\n  const dispatch = useDispatch();\n  const [\n    entraceCode,\n    selectedMusicGenre,\n    searchResult,\n    searchBarEnterOnOff,\n    trackList,\n    mainModeIdx,\n    spotifyApi,\n  ] = useSelector<\n    GlobalState,\n    [string, string, string, boolean, Music[], number, SpotifyWebApi]\n  >((state) => [\n    state.entraceCode,\n    state.selectedMusicGenre,\n    state.searchResult,\n    state.searchBarEnterOnOff,\n    state.trackList,\n    state.mainContentsModeIdx,\n    state.spotifyApi,\n  ]);\n\n  const accessToken = useAuth(entraceCode);\n\n  // console.log(accessToken);\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n    dispatch({\n      type: Actions.SET_ACCEES_TOKEN_NOW,\n      payload: { accessTokenNow: accessToken },\n    });\n  }, [accessToken]);\n\n  useEffect(() => {\n    if (!searchResult) return;\n    // console.log(\"HIHI\");\n    if (mainModeIdx !== 3) return;\n\n    spotifyApi.searchTracks(searchResult).then((res) => {\n      const list = res.body.tracks?.items.map((track) => {\n        return {\n          title: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          albumImg: track.album.images[0].url,\n          popularity: track.popularity,\n          url: track.uri,\n        };\n      }); // ?를 추가하는거는?? undefined가 있을수도 있다는 의미??\n      dispatch({\n        type: Actions.SET_TRACK_LIST,\n        payload: { trackList: list ? list : [] },\n      });\n    });\n  }, [searchBarEnterOnOff]);\n\n  useEffect(() => {\n    if (!accessToken) return;\n    if (mainModeIdx !== 0) return;\n\n    // 검색을 하고나서 다시 여기를 했을 때 잘 안먹히네...??\n    spotifyApi\n      .getRecommendations({\n        seed_genres: [`${selectedMusicGenre}`],\n      })\n      .then((res) => {\n        const list = (res.body.tracks as SpotifyApi.TrackObjectFull[]).map(\n          (track) => {\n            // console.log(track.album.images[0].url);\n            return {\n              title: track.name,\n              artist: track.artists[0].name,\n              album: track.album.name,\n              albumImg: track.album.images[0].url,\n              popularity: track.popularity,\n              url: track.uri,\n            };\n          }\n        ); // ?를 추가하는거는?? undefined가 있을수도 있다는 의미??\n        // setSearchResults(list ? list : []);\n        dispatch({\n          type: Actions.SET_TRACK_LIST,\n          payload: { trackList: list ? list : [] },\n        });\n      });\n  }, [selectedMusicGenre, accessToken, mainModeIdx]);\n\n  return (\n    <MainMusicListWrap\n      style={{\n        display: mainModeIdx !== 1 ? \"grid\" : \"none\",\n      }}\n    >\n      {trackList\n        .sort((a, b) => {\n          return b.popularity - a.popularity;\n        })\n        .map((track) => (\n          <MainMusicLists\n            key={track.title + track.artist + track.album + track.url}\n            track={track}\n          />\n        ))}\n    </MainMusicListWrap>\n  );\n};\n\n// type C = {\n//   a:number;\n// }\n\n// type D = {\n//   a:number;\n//   b:number;\n// }\n\n// let c:any = {\n//   a:5,\n//   b:7\n// }\n\n// let d:C =  c;\n\n// console.log(d.b);\n// console.log((d as D).b)  // 확신이 있을 때 !!\n","import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Actions from \"../../redux/actions\";\nimport { useDispatch } from \"react-redux\";\n\nexport default function useAuth(code: string) {\n  const [accessToken, setAcceessToken] = useState(\"\");\n  const [expiresIn, setExpiresIn] = useState(0);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    axios\n      // .post(\"http://localhost:3001/login\")\n      .post(\"https://musicdata.link/login\")\n      .then((res) => {\n        // console.log(res.data);\n        setAcceessToken(res.data.accessToken);\n        setExpiresIn(res.data.expiresIn); // 만료 되는 시간에 맞춰서 갱신\n      })\n      .catch(() => {\n        dispatch({\n          type: Actions.SET_API_ENTRACE_CODE,\n          payload: { apiEntraceCode: \"\" },\n        });\n        window.location.href = \"/\";\n      });\n  }, [code]);\n\n  return accessToken;\n}\n","import styled from \"styled-components\";\n\nconst MainContentsTitle = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  height: 60px;\n  margin-bottom: 10px;\n  @media (max-width: 750px) {\n    width: 280px;\n    height: 40px;\n    margin-bottom: 35px;\n  }\n\n  @media (max-width: 350px) {\n    width: 250px;\n\n    margin-bottom: 20px;\n  }\n`;\n\nconst MainContentsTitleText = styled.div`\n  color: #fff;\n  font-size: 25px;\n  @media (max-width: 750px) {\n    font-size: 20px;\n  }\n\n  @media (max-width: 350px) {\n    font-size: 18px;\n  }\n`;\n\nconst MainContentsTitleUnderbar = styled.div`\n  width: 100%;\n  height: 4px;\n\n  @media (max-width: 750px) {\n    height: 3px;\n    width: 90%;\n  }\n\n  @media (max-width: 350px) {\n    width: 80%;\n    height: 2px;\n  }\n`;\n\nexport const Maintitle = ({\n  title,\n  barColor,\n}: {\n  title: string;\n  barColor: string;\n}) => {\n  return (\n    <MainContentsTitle>\n      <MainContentsTitleText>{title}</MainContentsTitleText>\n      <MainContentsTitleUnderbar style={{ backgroundColor: `${barColor}` }} />\n    </MainContentsTitle>\n  );\n};\n","import { MainGenre } from \"./main-genre\";\nimport { MainTrackListOnMode } from \"./main-trackListOnMode\";\nimport { Maintitle } from \"./main-title\";\n\nimport styled from \"styled-components\";\nimport { useSelector } from \"react-redux\";\nimport { GlobalState } from \"../../redux/reducer\";\n\nconst MainWrap = styled.div`\n  width: 100%;\n  height: 80vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0 20px;\n  box-sizing: border-box;\n`;\n\nconst MainContentsWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 90%;\n  height: 80%;\n`;\n\nexport const Main = () => {\n  const [nameOfTitle, colorOfTitleBar] = useSelector<\n    GlobalState,\n    [string, string]\n  >((state) => [state.nameOfTitle, state.colorOfTitleBar]);\n\n  return (\n    <MainWrap>\n      <MainContentsWrap>\n        <Maintitle title={nameOfTitle} barColor={colorOfTitleBar} />\n        <MainGenre />\n        <MainTrackListOnMode />\n      </MainContentsWrap>\n    </MainWrap>\n  );\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport Actions from \"../redux/actions\";\n\nimport styled from \"styled-components\";\n\nimport { Navbar } from \"./navbar/navbar\";\nimport { Footer } from \"./footer/footer\";\nimport { Main } from \"./main/main\";\nimport { useEffect } from \"react\";\n\nconst BackgroundWrap = styled.div`\n  width: 100vw;\n  height: 100vh;\n  /* position: fixed; // 음... 이전에 어떻게 했지?? */\n  background: linear-gradient(\n    90deg,\n    #38adae -1.77%,\n    #cd295a 103.5%,\n    rgba(254, 144, 175, 0) 103.51%\n  );\n`;\n\nexport default function Dashboard() {\n  const dispatch = useDispatch();\n\n  // useEffect(() => {\n  //   dispatch({\n  //     type: Actions.SET_API_ENTRACE_CODE,\n  //     payload: { apiEntraceCode: code },\n  //   });\n  // }, [code]);\n\n  return (\n    <BackgroundWrap>\n      <Navbar />\n      <Main />\n      <Footer />\n    </BackgroundWrap>\n  );\n}\n","import Actions from \"./actions\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\n// require(\"dotenv\").config();\n\nexport interface Music {\n  title: string;\n  artist: string;\n  album: string;\n  albumImg: string;\n  popularity: number;\n  url: string;\n}\n\nexport interface GlobalState {\n  mainContentsModeIdx: number;\n  musicList: string[];\n  entraceCode: string;\n  accessTokenNow: string;\n  selectedMusicGenre: string;\n  nameOfTitle: string;\n  colorOfTitleBar: string;\n  searchResult: string;\n  searchBarOnOff: boolean;\n  searchBarEnterOnOff: boolean;\n  trackList: Music[];\n  trackNow: Music;\n  spotifyApi: SpotifyWebApi;\n  myListId: string;\n  playingListId: string;\n  addMusicToMylist: boolean;\n  subMusicFromMylist: boolean;\n  // authUrl?: string;\n}\n\n// const code = new URLSearchParams(window.location.search).get(\"code\") ?? \"\";\n// console.log(process.env);\n\nconst initialState: GlobalState = {\n  mainContentsModeIdx: 0,\n  musicList: [],\n  entraceCode: \"code\",\n  accessTokenNow: \"\",\n  selectedMusicGenre: \"pop\",\n  nameOfTitle: \"Recommand\",\n  colorOfTitleBar: \"#72B1C5\",\n  searchResult: \"\",\n  searchBarOnOff: false,\n  searchBarEnterOnOff: false,\n  trackList: [],\n  trackNow: {\n    title: \"\",\n    artist: \"\",\n    album: \"\",\n    albumImg: \"\",\n    popularity: 0,\n    url: \"\",\n  },\n  spotifyApi: new SpotifyWebApi({\n    clientId: \"e4ef76d98ff348cfbe2fe41f11d87279\",\n  }),\n  myListId: \"\",\n  playingListId: \"\",\n  addMusicToMylist: false,\n  subMusicFromMylist: false,\n  // authUrl: process.env.AUTH_URL,\n};\n\n/**\n * while (true){\n    wait LoginRequest\n    if(success){\n       // 로그인이 됐음으로 데이터 추가...\n       wait LogoutRequest\n       // 로그아웃이 됐음으로 데이터 제거...\n    }\n * }\n * \n */\n\nfunction reducer(\n  state: GlobalState = initialState,\n  action: { type: Actions; payload: any }\n): GlobalState {\n  // return type !!\n  switch (action.type) {\n    case Actions.CHANGE_MAIN_CONTENTS_MODE_TO_MAIN:\n      return {\n        ...state,\n        mainContentsModeIdx: 0,\n        nameOfTitle: \"Recommand\",\n        colorOfTitleBar: \"#72B1C5\",\n        selectedMusicGenre: \"pop\",\n      };\n    case Actions.CHANGE_MAIN_CONTENTS_MODE_TO_GENRE:\n      return {\n        ...state,\n        mainContentsModeIdx: 1,\n        nameOfTitle: \"Genre\",\n        colorOfTitleBar: \"#7972C5\",\n      };\n    case Actions.CHANGE_MAIN_CONTENTS_MODE_TO_MYLIST:\n      return {\n        ...state,\n        mainContentsModeIdx: 2,\n        nameOfTitle: \"MyList\",\n        colorOfTitleBar: \"#D96BC1\",\n      };\n    case Actions.CHANGE_MAIN_CONTENTS_MODE_TO_SEARCH:\n      return {\n        ...state,\n        mainContentsModeIdx: state.mainContentsModeIdx,\n        searchBarOnOff: action.payload.searchBarOnOff,\n      };\n    case Actions.SET_API_ENTRACE_CODE:\n      return { ...state, entraceCode: action.payload.apiEntraceCode };\n    case Actions.SET_SEARCH_RESULT:\n      return {\n        ...state,\n        searchResult: action.payload.searchResult,\n      };\n    case Actions.SET_SEARCH_ENTER_ACTIVATED:\n      return {\n        ...state,\n        mainContentsModeIdx: 3,\n        searchBarEnterOnOff: !state.searchBarEnterOnOff,\n        nameOfTitle: `search result : ${state.searchResult}`,\n        colorOfTitleBar: \"#D96BC1\",\n        searchBarOnOff: false,\n      };\n    case Actions.SET_TRACK_LIST:\n      return {\n        ...state,\n        trackList: action.payload.trackList,\n      };\n    case Actions.SET_ACCEES_TOKEN_NOW:\n      return {\n        ...state,\n        accessTokenNow: action.payload.accessTokenNow,\n      };\n    case Actions.SET_MYLIST_ID:\n      return {\n        ...state,\n        myListId: action.payload.myListId,\n      };\n    case Actions.SET_PLAYING_NOW_LIST_ID:\n      return {\n        ...state,\n        playingListId: action.payload.playingListId,\n      };\n    case Actions.SET_ADD_MUSIC_TO_MYLIST:\n      return {\n        ...state,\n        addMusicToMylist: !state.addMusicToMylist,\n      };\n    case Actions.SET_SUB_MUSIC_FROM_MYLIST:\n      return {\n        ...state,\n        subMusicFromMylist: !state.subMusicFromMylist,\n      };\n    case Actions.CHOICE_MUSIC_GENRE:\n      return {\n        ...state,\n        selectedMusicGenre: action.payload.genre,\n        mainContentsModeIdx: 0,\n        nameOfTitle: action.payload.nameOfTitle,\n        colorOfTitleBar: action.payload.colorOfTitleBar,\n      };\n    case Actions.CHOICE_PLAY_MUSIC_NOW:\n      return {\n        ...state,\n        trackNow: action.payload.trackNow,\n      };\n    // case Actions.RESET_MUSIC_LIST:\n    //   return { ...state, musicList: action.payload.listFromApi };\n    // case Actions.PLUS:\n    //    state.b++; --> usestate처럼 새로운 객체로 반환해줘야한다.\n    //   return { ...state, b: state.b + 1 };\n  }\n  return state;\n}\n\nexport default reducer;\n","import { combineReducers, createStore } from \"redux\";\nimport reducer from \"./reducer\";\n\nconst store = createStore(reducer);\n\nexport default store;\n","import React from \"react\";\n\n// import './App.css';\n\nimport { Provider, useSelector } from \"react-redux\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Dashboard from \"./components/Dashboard\";\n\nimport store from \"./redux/index\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Dashboard />;\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}