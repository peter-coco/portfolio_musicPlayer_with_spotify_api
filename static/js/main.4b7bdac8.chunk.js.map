{"version":3,"sources":["components/Login.tsx","redux/actions.ts","components/navbar.tsx","components/footer/footer.tsx","components/main/main-genre.tsx","components/main/main-musiclist.tsx","components/useAuth.ts","components/main/main.tsx","components/Dashboard.tsx","redux/reducer.ts","redux/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Login","Container","className","style","minHeight","minWidth","background","href","backgroundColor","border","Actions","NavbarWrap","styled","div","NavbarMenusWrap","NavbarMenu","i","NavbarSearchBarWrap","NavbarSearchBarInput","input","NavbarMenus","dispatch","useDispatch","onClick","type","CHANGE_MAIN_CONTENTS_MODE_TO_MAIN","CHANGE_MAIN_CONTENTS_MODE_TO_GENRE","CHANGE_MAIN_CONTENTS_MODE_TO_MYLIST","CHANGE_MAIN_CONTENTS_MODE_TO_SEARCH","payload","searchBarOnOff","NavbarSearchBar","onChange","e","SET_SEARCH_RESULT","searchResult","target","value","onKeyDown","key","SET_SEARCH_ENTER_ACTIVATED","Navbar","useSelector","state","onOutsideClick","FooterWrap","Footer","trackNow","accessTokenNow","useState","play","setPlay","useEffect","url","token","showSaveIcon","callback","isPlaying","uris","MainGenreWrap","MainGenreList","MainGenreLists","musicGenre","CHOICE_MUSIC_GENRE","genre","nameOfTitle","MainGenre","mainModeIdx","mainContentsModeIdx","display","map","MainMusicListWrap","MainMusicList","MainMusicListImg","img","MainMusicListSubscription","MainMusicListTitle","MainMusicListArtistNAlbum","MainMusicSubFunctions","MainMusicSubFunc","MainMusicLists","track","spotifyApi","myListId","playingListId","src","albumImg","title","artist","album","CHOICE_PLAY_MUSIC_NOW","addTracksToPlaylist","then","res","SET_ADD_MUSIC_TO_MYLIST","removeTracksFromPlaylist","uri","SET_SUB_MUSIC_FROM_MYLIST","MainRecommandedList","entraceCode","selectedMusicGenre","searchBarEnterOnOff","trackList","addMusicToMylist","subMusicFromMylist","accessToken","code","setAcceessToken","refreshToken","setRefreshToken","expiresIn","setExpiresIn","axios","post","data","catch","SET_API_ENTRACE_CODE","apiEntraceCode","window","location","interval","setInterval","history","pushState","clearInterval","useAuth","setAccessToken","SET_ACCEES_TOKEN_NOW","searchTracks","list","body","tracks","items","name","artists","images","popularity","SET_TRACK_LIST","getPlaylist","createPlaylist","description","SET_MYLIST_ID","id","SET_PLAYING_NOW_LIST_ID","getRecommendations","seed_genres","sort","a","b","MainWrap","MainContentsWrap","MainContentsTitle","MainContentsTitleText","MainContentsTitleUnderbar","Maintitle","barColor","Main","colorOfTitleBar","BackgroundWrap","Dashboard","initialState","musicList","URLSearchParams","search","get","SpotifyWebApi","clientId","reducer","action","store","createStore","console","log","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4b7bdac8.chunk.js","sourcesContent":["import React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { useSelector } from \"react-redux\";\nimport { GlobalState } from \"../redux/reducer\";\n\nconst AUTH_URL =\n  \"https://accounts.spotify.com/authorize?client_id=e4ef76d98ff348cfbe2fe41f11d87279&response_type=code&redirect_uri=http://localhost:3000&scope=streaming%20user-read-email%20user-read-private%20user-library-read%20user-library-modify%20user-read-playback-state%20user-modify-playback-state%20playlist-modify-public%20playlist-modify-private\";\n\nexport default function Login() {\n  return (\n    <Container\n      className=\"d-flex justify-content-center align-items-center\"\n      style={{\n        minHeight: \"100vh\",\n        minWidth: \"100vw\",\n        background: `linear-gradient(\n                      90deg,\n                      #38adae -1.77%,\n                      #cd295a 103.5%,\n                      rgba(254, 144, 175, 0) 103.51%\n                    )`,\n      }}\n    >\n      <a\n        className=\"btn btn-success btn-lg\"\n        href={AUTH_URL}\n        style={{ backgroundColor: \"#1b1b1b\", border: \"0px\" }}\n      >\n        Login With Spotify\n      </a>\n    </Container>\n  );\n}\n","enum Actions {\n  CHANGE_MAIN_CONTENTS_MODE_TO_MAIN,\n  CHANGE_MAIN_CONTENTS_MODE_TO_GENRE,\n  CHANGE_MAIN_CONTENTS_MODE_TO_MYLIST,\n  CHANGE_MAIN_CONTENTS_MODE_TO_SEARCH,\n  SET_API_ENTRACE_CODE,\n  SET_TRACK_LIST,\n  SET_SEARCH_RESULT,\n  SET_SEARCH_ENTER_ACTIVATED,\n  SET_ACCEES_TOKEN_NOW,\n  SET_MYLIST_ID,\n  SET_PLAYING_NOW_LIST_ID,\n  SET_ADD_MUSIC_TO_MYLIST,\n  SET_SUB_MUSIC_FROM_MYLIST,\n  CHOICE_MUSIC_GENRE,\n  CHOICE_PLAY_MUSIC_NOW,\n}\n\nexport default Actions;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport Actions from \"../redux/actions\";\nimport { GlobalState, Music } from \"../redux/reducer\";\nimport OnOutsiceClick from \"react-outclick\";\n\nconst NavbarWrap = styled.div`\n  width: 100%;\n  height: 10vh;\n  min-height: 60px;\n  /* position: absolute; */\n  /* top: 0; */\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst NavbarMenusWrap = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 560px;\n  height: 30px;\n  @media (max-width: 750px) {\n    width: 200px;\n  }\n`;\n\nconst NavbarMenu = styled.i`\n  font-size: 25px;\n  line-height: 30px;\n  color: #fff;\n  cursor: pointer;\n  @media (max-width: 750px) {\n    font-size: 20px;\n  }\n  @media (max-width: 350px) {\n    font-size: 15px;\n  }\n`;\n\nconst NavbarSearchBarWrap = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 300px;\n  height: 30px;\n\n  @media (max-width: 750px) {\n    width: 200px;\n  }\n`;\n\n// const NavbarSearchBarEnter = styled.i`\n//   width: 30px;\n//   height: 30px;\n// `;\nconst NavbarSearchBarInput = styled.input`\n  width: 100%;\n  height: 100%;\n`;\n\nconst NavbarMenus = () => {\n  // const mainModeIdx = useSelector<GlobalState>(\n  //   (state) => state.mainContentsModeIdx\n  // );\n  const dispatch = useDispatch();\n\n  return (\n    <NavbarMenusWrap>\n      <NavbarMenu\n        className=\"fas fa-home\"\n        onClick={() => {\n          dispatch({\n            type: Actions.CHANGE_MAIN_CONTENTS_MODE_TO_MAIN,\n          });\n        }}\n      />\n      <NavbarMenu\n        className=\"fas fa-chart-bar\"\n        onClick={() => {\n          dispatch({\n            type: Actions.CHANGE_MAIN_CONTENTS_MODE_TO_GENRE,\n          });\n        }}\n      />\n      <NavbarMenu\n        className=\"fas fa-list-alt\"\n        onClick={() => {\n          dispatch({\n            type: Actions.CHANGE_MAIN_CONTENTS_MODE_TO_MYLIST,\n          });\n        }}\n      />\n      <NavbarMenu\n        className=\"fas fa-search\"\n        onClick={() => {\n          dispatch({\n            type: Actions.CHANGE_MAIN_CONTENTS_MODE_TO_SEARCH,\n            payload: { searchBarOnOff: true },\n          });\n        }}\n      />\n    </NavbarMenusWrap>\n  );\n};\n\nconst NavbarSearchBar = () => {\n  // const [inputText, setInputText] = useState(\"\");\n\n  const dispatch = useDispatch();\n  return (\n    <NavbarSearchBarWrap>\n      <NavbarSearchBarInput\n        onChange={(e) => {\n          dispatch({\n            type: Actions.SET_SEARCH_RESULT,\n            payload: { searchResult: e.target.value },\n          });\n        }}\n        onKeyDown={(e) => {\n          if (e.key === \"Enter\") {\n            dispatch({\n              type: Actions.SET_SEARCH_ENTER_ACTIVATED,\n            });\n          }\n        }}\n      />\n    </NavbarSearchBarWrap>\n  );\n};\n\nexport const Navbar = () => {\n  // const [a, b] = useSelector<GlobalState, [string, number]>((state) => [\n  //   state.a,\n  //   state.b,\n  // ]);\n  const searchBarOnOff = useSelector<GlobalState, boolean>(\n    (state) => state.searchBarOnOff\n  );\n  const dispatch = useDispatch();\n  return searchBarOnOff ? (\n    <NavbarWrap>\n      <OnOutsiceClick\n        onOutsideClick={() => {\n          dispatch({\n            type: Actions.CHANGE_MAIN_CONTENTS_MODE_TO_SEARCH,\n            payload: { searchBarOnOff: false },\n          });\n        }}\n      >\n        <NavbarSearchBar />\n      </OnOutsiceClick>\n    </NavbarWrap>\n  ) : (\n    <NavbarWrap>\n      <NavbarMenus />\n    </NavbarWrap>\n  );\n};\n","import styled from \"styled-components\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\nimport { useSelector } from \"react-redux\";\nimport { GlobalState, Music } from \"../../redux/reducer\";\nimport { useEffect, useState } from \"react\";\n\nconst FooterWrap = styled.div`\n  width: 100%;\n  height: 10vh;\n  min-height: 60px;\n`;\n\nexport const Footer = () => {\n  const trackNow = useSelector<GlobalState, Music>((state) => state.trackNow);\n  const [accessTokenNow] = useSelector<GlobalState, [string]>((state) => [\n    state.accessTokenNow,\n  ]);\n  const [play, setPlay] = useState(false);\n  useEffect(() => setPlay(true), [trackNow.url]);\n\n  if (!accessTokenNow) return null;\n  return (\n    <FooterWrap>\n      <SpotifyPlayer\n        // style={{ width: \"100%\", height: \"10vh\" }}\n        token={accessTokenNow}\n        showSaveIcon\n        callback={(state) => {\n          if (!state.isPlaying) setPlay(false);\n        }}\n        play={play}\n        uris={trackNow.url ? [trackNow.url] : []}\n      />\n    </FooterWrap>\n  );\n};\n","import styled from \"styled-components\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { GlobalState } from \"../../redux/reducer\";\nimport Actions from \"../../redux/actions\";\n\nconst MainGenreWrap = styled.div`\n  width: 100%;\n  height: 80%;\n  grid-template-columns: 1fr 1fr 1fr;\n  overflow-y: scroll;\n\n  @media (max-width: 750px) {\n    grid-template-columns: 1fr 1fr;\n  }\n`;\n\nconst MainGenreList = styled.div`\n  width: 200px;\n  height: 50px;\n  background-color: #1b1b1b;\n  color: #fff;\n  /* margin-right: 50px; */\n  text-align: center;\n  line-height: 50px;\n  font-size: 16px;\n\n  cursor: pointer;\n  @media (max-width: 750px) {\n    width: 130px;\n    height: 40px;\n    line-height: 40px;\n    font-size: 15px;\n\n    /* margin-right: 30px; */\n  }\n\n  @media (max-width: 350px) {\n    width: 100px;\n    height: 30px;\n    line-height: 30px;\n    font-size: 13px;\n  }\n`;\n\nconst MainGenreLists = ({ musicGenre }: { musicGenre: string }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <MainGenreList\n      onClick={() => {\n        // go to Genre music lists\n        // console.log(`click genre : ${musicGenre}`);\n        dispatch({\n          type: Actions.CHOICE_MUSIC_GENRE,\n          payload: { genre: musicGenre, nameOfTitle: musicGenre },\n        });\n      }}\n    >\n      {musicGenre}\n    </MainGenreList>\n  );\n};\n\nexport const MainGenre = () => {\n  const genreLists = [\n    \"k-pop\",\n    \"pop\",\n    \"j-pop\",\n    \"rock\",\n    \"classical\",\n    \"jazz\",\n    \"dance\",\n    \"edm\",\n    \"acoustic\",\n  ];\n\n  const mainModeIdx = useSelector<GlobalState>(\n    (state) => state.mainContentsModeIdx\n  );\n\n  return (\n    <MainGenreWrap style={{ display: mainModeIdx === 1 ? \"grid\" : \"none\" }}>\n      {genreLists.map((musicGenre) => (\n        <MainGenreLists key={musicGenre} musicGenre={musicGenre} />\n      ))}\n    </MainGenreWrap>\n  );\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { GlobalState, Music } from \"../../redux/reducer\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport useAuth from \"../useAuth\";\nimport Actions from \"../../redux/actions\";\n\nconst MainMusicListWrap = styled.div`\n  width: 100%;\n  height: 80%;\n  grid-template-columns: 1fr 1fr;\n  overflow-y: scroll;\n  /* overflow-x: hidden; */\n\n  @media (max-width: 750px) {\n    grid-template-columns: 1fr;\n  }\n`;\n\nconst MainMusicList = styled.div`\n  width: 100%;\n  height: 80px;\n  display: flex;\n  position: relative;\n  align-items: center;\n  margin-right: 30px;\n  @media (max-width: 750px) {\n    width: 100%;\n    height: 40px;\n    margin-bottom: 20px;\n    margin-right: 0%;\n  }\n  @media (max-width: 350px) {\n    height: 35px;\n    margin-bottom: 15px;\n  }\n`;\nconst MainMusicListImg = styled.img`\n  width: 50px;\n  height: 50px;\n  margin-right: 20px;\n  @media (max-width: 750px) {\n    width: 40px;\n    height: 40px;\n    margin-right: 20px;\n  }\n  @media (max-width: 350px) {\n    width: 35px;\n    height: 35px;\n    margin-right: 15px;\n  }\n`;\nconst MainMusicListSubscription = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nconst MainMusicListTitle = styled.div`\n  color: #fff;\n  font-size: 18px;\n  /* width: 300px; */\n\n  width: 200px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n\n  @media (max-width: 750px) {\n    font-size: 15px;\n    width: 220px;\n  }\n\n  @media (max-width: 350px) {\n    font-size: 13px;\n    width: 150px;\n  }\n`;\nconst MainMusicListArtistNAlbum = styled.div`\n  color: #cacaca;\n  font-size: 18px;\n\n  width: 200px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  /* width: 100%; */\n  @media (max-width: 750px) {\n    font-size: 15px;\n    width: 220px;\n  }\n\n  @media (max-width: 350px) {\n    font-size: 13px;\n    width: 150px;\n  }\n`;\n\nconst MainMusicSubFunctions = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 30px;\n  position: absolute;\n  background-color: #1b1b1b;\n  width: 80%;\n  height: 100%;\n  opacity: 0;\n  &:hover {\n    opacity: 0.5;\n  }\n`;\n\nconst MainMusicSubFunc = styled.i`\n  font-size: 20px;\n  color: #fff;\n  line-height: 30px;\n  cursor: pointer;\n\n  &:hover {\n    color: #975f31;\n  }\n  @media (max-width: 750px) {\n    font-size: 15px;\n    margin-left: 20px;\n    /* line-height: 30px; */\n  }\n\n  @media (max-width: 350px) {\n    font-size: 10px;\n  }\n`;\n\nconst MainMusicLists = ({ track }: { track: Music }) => {\n  const dispatch = useDispatch();\n  const [spotifyApi, myListId, playingListId] = useSelector<\n    GlobalState,\n    [SpotifyWebApi, string, string]\n  >((state) => [state.spotifyApi, state.myListId, state.playingListId]);\n\n  return (\n    <MainMusicList>\n      <MainMusicListImg src={track.albumImg} />\n      <MainMusicListSubscription>\n        <MainMusicListTitle>{track.title}</MainMusicListTitle>\n        <MainMusicListArtistNAlbum>\n          {track.artist} / {track.album}\n        </MainMusicListArtistNAlbum>\n      </MainMusicListSubscription>\n      <MainMusicSubFunctions>\n        <MainMusicSubFunc\n          className=\"fas fa-play\"\n          onClick={() => {\n            dispatch({\n              type: Actions.CHOICE_PLAY_MUSIC_NOW,\n              payload: { trackNow: track },\n            });\n          }}\n        />\n        <MainMusicSubFunc className=\"fas fa-thumbs-up\" />\n        <MainMusicSubFunc\n          className=\"fas fa-plus\"\n          onClick={() => {\n            if (!myListId) return;\n            spotifyApi\n              .addTracksToPlaylist(myListId, [track.url])\n              .then((res) => {\n                dispatch({\n                  type: Actions.SET_ADD_MUSIC_TO_MYLIST,\n                });\n              });\n          }}\n        />\n        <MainMusicSubFunc\n          className=\"fas fa-minus\"\n          onClick={() => {\n            if (!myListId) return;\n            spotifyApi\n              .removeTracksFromPlaylist(myListId, [{ uri: track.url }])\n              .then((res) => {\n                dispatch({ type: Actions.SET_SUB_MUSIC_FROM_MYLIST });\n              });\n          }}\n        />\n      </MainMusicSubFunctions>\n    </MainMusicList>\n  );\n};\n\nexport const MainRecommandedList = () => {\n  const dispatch = useDispatch();\n  const [\n    entraceCode,\n    selectedMusicGenre,\n    searchResult,\n    searchBarEnterOnOff,\n    trackList,\n    mainModeIdx,\n    spotifyApi,\n    myListId,\n    addMusicToMylist,\n    subMusicFromMylist,\n  ] = useSelector<\n    GlobalState,\n    [\n      string,\n      string,\n      string,\n      boolean,\n      Music[],\n      number,\n      SpotifyWebApi,\n      string,\n      boolean,\n      boolean\n    ]\n  >((state) => [\n    state.entraceCode,\n    state.selectedMusicGenre,\n    state.searchResult,\n    state.searchBarEnterOnOff,\n    state.trackList,\n    state.mainContentsModeIdx,\n    state.spotifyApi,\n    state.myListId,\n    state.addMusicToMylist,\n    state.subMusicFromMylist,\n  ]);\n\n  const accessToken = useAuth(entraceCode);\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n    dispatch({\n      type: Actions.SET_ACCEES_TOKEN_NOW,\n      payload: { accessTokenNow: accessToken },\n    });\n  }, [accessToken]);\n\n  useEffect(() => {\n    if (!searchResult) return;\n    // console.log(\"HIHI\");\n    if (mainModeIdx !== 3) return;\n\n    spotifyApi.searchTracks(searchResult).then((res) => {\n      const list = res.body.tracks?.items.map((track) => {\n        return {\n          title: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          albumImg: track.album.images[0].url,\n          popularity: track.popularity,\n          url: track.uri,\n        };\n      }); // ?를 추가하는거는?? undefined가 있을수도 있다는 의미??\n      dispatch({\n        type: Actions.SET_TRACK_LIST,\n        payload: { trackList: list ? list : [] },\n      });\n    });\n  }, [searchBarEnterOnOff]);\n\n  useEffect(() => {\n    // console.log(mainModeIdx);\n    if (!myListId) return;\n    if (mainModeIdx !== 2) return;\n    spotifyApi.getPlaylist(myListId).then((res) => {\n      const list = res.body.tracks.items.map((track) => {\n        return {\n          title: track.track.name,\n          artist: track.track.artists[0].name,\n          album: track.track.album.name,\n          albumImg: track.track.album.images[0].url,\n          popularity: track.track.popularity,\n          url: track.track.uri,\n        };\n      });\n      dispatch({\n        type: Actions.SET_TRACK_LIST,\n        payload: { trackList: list ? list : [] },\n      });\n    });\n  }, [myListId, mainModeIdx, addMusicToMylist, subMusicFromMylist]);\n\n  useEffect(() => {\n    if (!accessToken) return;\n    // Create a private playlist\n    spotifyApi\n      .createPlaylist(\"My playlist\", {\n        description: \"My favorite music list\",\n      })\n      .then((res) => {\n        dispatch({\n          type: Actions.SET_MYLIST_ID,\n          payload: { myListId: res.body.id },\n        });\n      });\n\n    // Create a playing list what i listened once\n    spotifyApi\n      .createPlaylist(\"playing now list\", {\n        description: \"My playlist what i listened once\",\n      })\n      .then((res) => {\n        dispatch({\n          type: Actions.SET_PLAYING_NOW_LIST_ID,\n          payload: res.body.id,\n        });\n      });\n  }, [accessToken]);\n\n  useEffect(() => {\n    if (!accessToken) return;\n    if (mainModeIdx !== 0) return;\n\n    // 검색을 하고나서 다시 여기를 했을 때 잘 안먹히네...??\n    spotifyApi\n      .getRecommendations({\n        seed_genres: [`${selectedMusicGenre}`],\n      })\n      .then((res) => {\n        const list = (res.body.tracks as SpotifyApi.TrackObjectFull[]).map(\n          (track) => {\n            return {\n              title: track.name,\n              artist: track.artists[0].name,\n              album: track.album.name,\n              albumImg: track.album.images[0].url,\n              popularity: track.popularity,\n              url: track.uri,\n            };\n          }\n        ); // ?를 추가하는거는?? undefined가 있을수도 있다는 의미??\n        // setSearchResults(list ? list : []);\n        dispatch({\n          type: Actions.SET_TRACK_LIST,\n          payload: { trackList: list ? list : [] },\n        });\n      });\n  }, [selectedMusicGenre, accessToken, mainModeIdx]);\n\n  return (\n    <MainMusicListWrap\n      style={{\n        display: mainModeIdx !== 1 ? \"grid\" : \"none\",\n      }}\n    >\n      {trackList\n        .sort((a, b) => {\n          return b.popularity - a.popularity;\n        })\n        .map((track) => (\n          <MainMusicLists\n            key={track.title + track.artist + track.album + track.url}\n            track={track}\n          />\n        ))}\n    </MainMusicListWrap>\n  );\n};\n\n// type C = {\n//   a:number;\n// }\n\n// type D = {\n//   a:number;\n//   b:number;\n// }\n\n// let c:any = {\n//   a:5,\n//   b:7\n// }\n\n// let d:C =  c;\n\n// console.log((d as D).b)  // 확신이 있을 때 !!\n","import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Actions from \"../redux/actions\";\nimport { useDispatch } from \"react-redux\";\n\nexport default function useAuth(code: string) {\n  // if (!code) return null;\n  const [accessToken, setAcceessToken] = useState(\"\");\n  const [refreshToken, setRefreshToken] = useState(\"\");\n  const [expiresIn, setExpiresIn] = useState(0);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    axios\n      // .post(\"http://localhost:3001/login\", {\n      .post(\"https://musicdata.link/login\", {\n        code,\n      })\n      .then((res) => {\n        // console.log(res.data);\n        setAcceessToken(res.data.accessToken);\n        setRefreshToken(res.data.refreshToken);\n        setExpiresIn(res.data.expiresIn); // 만료 되는 시간에 맞춰서 갱신\n        // setExpiresIn(61);\n        // window.history.pushState({}, \"\", \"/\");\n      })\n      .catch(() => {\n        dispatch({\n          type: Actions.SET_API_ENTRACE_CODE,\n          payload: { apiEntraceCode: \"\" },\n        });\n        window.location.href = \"/\";\n      });\n  }, [code]);\n\n  useEffect(() => {\n    // 이부분 이해가 잘 안감\n    if (!refreshToken || !expiresIn) return;\n    const interval = setInterval(() => {\n      axios\n        // .post(\"http://localhost:3001/refresh\", {\n        .post(\"https://musicdata.link/refresh\", {\n          refreshToken,\n        })\n        .then((res) => {\n          // console.log(res.data)\n          setAcceessToken(res.data.accessToken);\n          setExpiresIn(res.data.expiresIn);\n          //   setExpiresIn(61); // 1초마다 갱신\n          // setRefreshToken(res.data.refreshToken);\n          window.history.pushState({}, \"\", \"/\");\n        })\n        .catch(() => {\n          window.location.href = \"/\";\n          // js : window.location\n        });\n    }, (expiresIn - 60) * 1000);\n\n    return () => clearInterval(interval);\n  }, [refreshToken, expiresIn]);\n\n  return accessToken;\n}\n\n// function dispatch(arg0: {\n//   type: Actions;\n//   payload: { apiEntraceCode: string };\n// }) {\n//   throw new Error(\"Function not implemented.\");\n// }\n","import { MainGenre } from \"./main-genre\";\nimport { MainRecommandedList } from \"./main-musiclist\";\n\nimport styled from \"styled-components\";\nimport { GlobalState } from \"../../redux/reducer\";\nimport { useSelector } from \"react-redux\";\n\nconst MainWrap = styled.div`\n  width: 100%;\n  height: 80vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0 20px;\n  box-sizing: border-box;\n`;\n\nconst MainContentsWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 90%;\n  height: 80%;\n`;\n\nconst MainContentsTitle = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  height: 60px;\n  margin-bottom: 10px;\n  @media (max-width: 750px) {\n    width: 280px;\n    height: 40px;\n    margin-bottom: 35px;\n  }\n\n  @media (max-width: 350px) {\n    width: 250px;\n\n    margin-bottom: 20px;\n  }\n`;\n\nconst MainContentsTitleText = styled.div`\n  color: #fff;\n  font-size: 25px;\n  @media (max-width: 750px) {\n    font-size: 20px;\n  }\n\n  @media (max-width: 350px) {\n    font-size: 18px;\n  }\n`;\n\nconst MainContentsTitleUnderbar = styled.div`\n  width: 100%;\n  height: 4px;\n\n  @media (max-width: 750px) {\n    height: 3px;\n    width: 90%;\n  }\n\n  @media (max-width: 350px) {\n    width: 80%;\n    height: 2px;\n  }\n`;\n\nconst Maintitle = ({\n  title,\n  barColor,\n}: {\n  title: string;\n  barColor: string;\n}) => {\n  return (\n    <MainContentsTitle>\n      <MainContentsTitleText>{title}</MainContentsTitleText>\n      <MainContentsTitleUnderbar style={{ backgroundColor: `${barColor}` }} />\n    </MainContentsTitle>\n  );\n};\n\nexport const Main = () => {\n  const [nameOfTitle, colorOfTitleBar] = useSelector<\n    GlobalState,\n    [string, string]\n  >((state) => [state.nameOfTitle, state.colorOfTitleBar]);\n\n  return (\n    <MainWrap>\n      <MainContentsWrap>\n        <Maintitle title={nameOfTitle} barColor={colorOfTitleBar} />\n        <MainGenre />\n        <MainRecommandedList />\n      </MainContentsWrap>\n    </MainWrap>\n  );\n};\n","import { useDispatch, useSelector } from \"react-redux\";\nimport Actions from \"../redux/actions\";\n\nimport styled from \"styled-components\";\n\nimport { Navbar } from \"./navbar\";\nimport { Footer } from \"./footer/footer\";\nimport { Main } from \"./main/main\";\nimport { useEffect } from \"react\";\n\nconst BackgroundWrap = styled.div`\n  width: 100vw;\n  height: 100vh;\n  /* position: fixed; // 음... 이전에 어떻게 했지?? */\n  background: linear-gradient(\n    90deg,\n    #38adae -1.77%,\n    #cd295a 103.5%,\n    rgba(254, 144, 175, 0) 103.51%\n  );\n`;\n\nexport default function Dashboard({ code }: { code: string }) {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch({\n      type: Actions.SET_API_ENTRACE_CODE,\n      payload: { apiEntraceCode: code },\n    });\n  }, [code]);\n\n  // dispatch({\n  //   type: Actions.SET_API_ENTRACE_CODE,\n  //   payload: { apiEntraceCode: code },\n  // });\n\n  return (\n    <BackgroundWrap>\n      <Navbar />\n      <Main />\n      <Footer />\n    </BackgroundWrap>\n  );\n}\n","import Actions from \"./actions\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\n// require(\"dotenv\").config();\n\nexport interface Music {\n  title: string;\n  artist: string;\n  album: string;\n  albumImg: string;\n  popularity: number;\n  url: string;\n}\n\nexport interface GlobalState {\n  mainContentsModeIdx: number;\n  musicList: string[];\n  entraceCode: string;\n  accessTokenNow: string;\n  selectedMusicGenre: string;\n  nameOfTitle: string;\n  colorOfTitleBar: string;\n  searchResult: string;\n  searchBarOnOff: boolean;\n  searchBarEnterOnOff: boolean;\n  trackList: Music[];\n  trackNow: Music;\n  spotifyApi: SpotifyWebApi;\n  myListId: string;\n  playingListId: string;\n  addMusicToMylist: boolean;\n  subMusicFromMylist: boolean;\n  // authUrl?: string;\n}\n\nconst code = new URLSearchParams(window.location.search).get(\"code\") ?? \"\";\n// console.log(process.env);\n\nconst initialState: GlobalState = {\n  mainContentsModeIdx: 0,\n  musicList: [],\n  entraceCode: code,\n  accessTokenNow: \"\",\n  selectedMusicGenre: \"pop\",\n  nameOfTitle: \"Recommand\",\n  colorOfTitleBar: \"#72B1C5\",\n  searchResult: \"\",\n  searchBarOnOff: false,\n  searchBarEnterOnOff: false,\n  trackList: [],\n  trackNow: {\n    title: \"\",\n    artist: \"\",\n    album: \"\",\n    albumImg: \"\",\n    popularity: 0,\n    url: \"\",\n  },\n  spotifyApi: new SpotifyWebApi({\n    clientId: \"e4ef76d98ff348cfbe2fe41f11d87279\",\n  }),\n  myListId: \"\",\n  playingListId: \"\",\n  addMusicToMylist: false,\n  subMusicFromMylist: false,\n  // authUrl: process.env.AUTH_URL,\n};\n\n/**\n * while (true){\n    wait LoginRequest\n    if(success){\n       // 로그인이 됐음으로 데이터 추가...\n       wait LogoutRequest\n       // 로그아웃이 됐음으로 데이터 제거...\n    }\n * }\n * \n */\n\nfunction reducer(\n  state: GlobalState = initialState,\n  action: { type: Actions; payload: any }\n): GlobalState {\n  // return type !!\n  switch (action.type) {\n    case Actions.CHANGE_MAIN_CONTENTS_MODE_TO_MAIN:\n      return {\n        ...state,\n        mainContentsModeIdx: 0,\n        nameOfTitle: \"Recommand\",\n        colorOfTitleBar: \"#72B1C5\",\n        selectedMusicGenre: \"pop\",\n      };\n    case Actions.CHANGE_MAIN_CONTENTS_MODE_TO_GENRE:\n      return {\n        ...state,\n        mainContentsModeIdx: 1,\n        nameOfTitle: \"Genre\",\n        colorOfTitleBar: \"#7972C5\",\n      };\n    case Actions.CHANGE_MAIN_CONTENTS_MODE_TO_MYLIST:\n      return {\n        ...state,\n        mainContentsModeIdx: 2,\n        nameOfTitle: \"MyList\",\n        colorOfTitleBar: \"#D96BC1\",\n      };\n    case Actions.CHANGE_MAIN_CONTENTS_MODE_TO_SEARCH:\n      return {\n        ...state,\n        mainContentsModeIdx: state.mainContentsModeIdx,\n        searchBarOnOff: action.payload.searchBarOnOff,\n      };\n    case Actions.SET_API_ENTRACE_CODE:\n      return { ...state, entraceCode: action.payload.apiEntraceCode };\n    case Actions.SET_SEARCH_RESULT:\n      return {\n        ...state,\n        searchResult: action.payload.searchResult,\n      };\n    case Actions.SET_SEARCH_ENTER_ACTIVATED:\n      return {\n        ...state,\n        mainContentsModeIdx: 3,\n        searchBarEnterOnOff: !state.searchBarEnterOnOff,\n        nameOfTitle: `search result : ${state.searchResult}`,\n        colorOfTitleBar: \"#D96BC1\",\n        searchBarOnOff: false,\n      };\n    case Actions.SET_TRACK_LIST:\n      return {\n        ...state,\n        trackList: action.payload.trackList,\n      };\n    case Actions.SET_ACCEES_TOKEN_NOW:\n      return {\n        ...state,\n        accessTokenNow: action.payload.accessTokenNow,\n      };\n    case Actions.SET_MYLIST_ID:\n      return {\n        ...state,\n        myListId: action.payload.myListId,\n      };\n    case Actions.SET_PLAYING_NOW_LIST_ID:\n      return {\n        ...state,\n        playingListId: action.payload.playingListId,\n      };\n    case Actions.SET_ADD_MUSIC_TO_MYLIST:\n      return {\n        ...state,\n        addMusicToMylist: !state.addMusicToMylist,\n      };\n    case Actions.SET_SUB_MUSIC_FROM_MYLIST:\n      return {\n        ...state,\n        subMusicFromMylist: !state.subMusicFromMylist,\n      };\n    case Actions.CHOICE_MUSIC_GENRE:\n      return {\n        ...state,\n        selectedMusicGenre: action.payload.genre,\n        mainContentsModeIdx: 0,\n        nameOfTitle: action.payload.nameOfTitle,\n        colorOfTitleBar: action.payload.colorOfTitleBar,\n      };\n    case Actions.CHOICE_PLAY_MUSIC_NOW:\n      return {\n        ...state,\n        trackNow: action.payload.trackNow,\n      };\n    // case Actions.RESET_MUSIC_LIST:\n    //   return { ...state, musicList: action.payload.listFromApi };\n    // case Actions.PLUS:\n    //    state.b++; --> usestate처럼 새로운 객체로 반환해줘야한다.\n    //   return { ...state, b: state.b + 1 };\n  }\n  return state;\n}\n\nexport default reducer;\n","import { combineReducers, createStore } from \"redux\";\nimport reducer from \"./reducer\";\n\nconst store = createStore(reducer);\n\nexport default store;\n","import React from \"react\";\n\n// import './App.css';\n\nimport { Provider, useSelector } from \"react-redux\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Login from \"./components/Login\";\nimport Dashboard from \"./components/Dashboard\";\n\nimport store from \"./redux/index\";\nimport { GlobalState } from \"./redux/reducer\";\n\nconst code = new URLSearchParams(window.location.search).get(\"code\");\n\nconst Main = () => {\n  // const code = useSelector<GlobalState, string>((state) => state.entraceCode);\n  console.log(code);\n  return code ? <Dashboard code={code} /> : <Login />;\n};\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Main />\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}