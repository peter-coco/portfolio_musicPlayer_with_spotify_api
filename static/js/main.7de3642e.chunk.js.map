{"version":3,"sources":["redux/actions.ts","redux/reducer.ts","redux/index.ts","components/navbar/navbar.tsx","components/main/main-genre.tsx","components/main/main-tracklist.tsx","components/main/main-trackListOnMode.tsx","components/utils/useAuth.ts","components/main/main-title.tsx","components/main/main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Actions","initialState","mainContentsModeIdx","musicList","entraceCode","accessTokenNow","selectedMusicGenre","nameOfTitle","colorOfTitleBar","searchResult","searchBarOnOff","searchBarEnterOnOff","trackList","trackNow","title","artist","album","albumImg","popularity","url","spotifyApi","SpotifyWebApi","clientId","reducer","state","action","type","CHANGE_MAIN_CONTENTS_MODE_TO_MAIN","CHANGE_MAIN_CONTENTS_MODE_TO_GENRE","CHANGE_MAIN_CONTENTS_MODE_TO_SEARCH","payload","SET_API_ENTRACE_CODE","apiEntraceCode","SET_SEARCH_RESULT","SET_SEARCH_ENTER_ACTIVATED","SET_TRACK_LIST","SET_ACCEES_TOKEN_NOW","CHOICE_MUSIC_GENRE","genre","store","createStore","NavbarWrap","styled","div","NavbarMenusWrap","NavbarMenu","i","NavbarSearchBarWrap","NavbarSearchBarInput","input","NavbarMenus","dispatch","useDispatch","className","onClick","NavbarSearchBar","onChange","e","target","value","onKeyDown","key","Navbar","useSelector","onOutsideClick","MainGenreWrap","MainGenreList","MainGenreLists","musicGenre","MainGenre","mainModeIdx","style","display","map","MainMusicList","MainMusicListImg","img","MainMusicListSubscription","MainMusicListTitle","MainMusicListArtistNAlbum","MainMusicLists","track","src","MainMusicListWrap","MainTrackListOnMode","accessToken","code","useState","setAcceessToken","setExpiresIn","useEffect","axios","post","then","res","data","expiresIn","catch","window","location","href","useAuth","setAccessToken","searchTracks","list","body","tracks","items","name","artists","images","uri","getRecommendations","seed_genres","resetMusicListScroll","document","getElementById","scrollTop","console","log","id","sort","a","b","MainContentsTitle","MainContentsTitleText","MainContentsTitleUnderbar","Maintitle","barColor","backgroundColor","MainWrap","MainContentsWrap","Main","BackgroundWrap","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7de3642e.chunk.js","sourcesContent":["enum Actions {\r\n  CHANGE_MAIN_CONTENTS_MODE_TO_MAIN,\r\n  CHANGE_MAIN_CONTENTS_MODE_TO_GENRE,\r\n  CHANGE_MAIN_CONTENTS_MODE_TO_SEARCH,\r\n  SET_API_ENTRACE_CODE,\r\n  SET_TRACK_LIST,\r\n  SET_SEARCH_RESULT,\r\n  SET_SEARCH_ENTER_ACTIVATED,\r\n  SET_ACCEES_TOKEN_NOW,\r\n  CHOICE_MUSIC_GENRE,\r\n}\r\n\r\nexport default Actions;\r\n","import Actions from \"./actions\";\r\nimport SpotifyWebApi from \"spotify-web-api-node\";\r\n\r\nexport interface Music {\r\n  title: string;\r\n  artist: string;\r\n  album: string;\r\n  albumImg: string;\r\n  popularity: number;\r\n  url: string;\r\n}\r\n\r\nexport interface GlobalState {\r\n  mainContentsModeIdx: number;\r\n  musicList: string[];\r\n  entraceCode: string;\r\n  accessTokenNow: string;\r\n  selectedMusicGenre: string;\r\n  nameOfTitle: string;\r\n  colorOfTitleBar: string;\r\n  searchResult: string;\r\n  searchBarOnOff: boolean;\r\n  searchBarEnterOnOff: boolean;\r\n  trackList: Music[];\r\n  trackNow: Music;\r\n  spotifyApi: SpotifyWebApi;\r\n}\r\n\r\nconst initialState: GlobalState = {\r\n  mainContentsModeIdx: 0,\r\n  musicList: [],\r\n  entraceCode: \"code\",\r\n  accessTokenNow: \"\",\r\n  selectedMusicGenre: \"pop\",\r\n  nameOfTitle: \"Recommand\",\r\n  colorOfTitleBar: \"#72B1C5\",\r\n  searchResult: \"\",\r\n  searchBarOnOff: false,\r\n  searchBarEnterOnOff: false,\r\n  trackList: [],\r\n  trackNow: {\r\n    title: \"\",\r\n    artist: \"\",\r\n    album: \"\",\r\n    albumImg: \"\",\r\n    popularity: 0,\r\n    url: \"\",\r\n  },\r\n  spotifyApi: new SpotifyWebApi({\r\n    clientId: \"e4ef76d98ff348cfbe2fe41f11d87279\",\r\n  }),\r\n};\r\n\r\nfunction reducer(\r\n  state: GlobalState = initialState,\r\n  action: { type: Actions; payload: any }\r\n): GlobalState {\r\n  // return type !!\r\n  switch (action.type) {\r\n    case Actions.CHANGE_MAIN_CONTENTS_MODE_TO_MAIN:\r\n      return {\r\n        ...state,\r\n        mainContentsModeIdx: 0,\r\n        nameOfTitle: \"Recommand\",\r\n        colorOfTitleBar: \"#72B1C5\",\r\n        selectedMusicGenre: \"pop\",\r\n      };\r\n    case Actions.CHANGE_MAIN_CONTENTS_MODE_TO_GENRE:\r\n      return {\r\n        ...state,\r\n        mainContentsModeIdx: 1,\r\n        nameOfTitle: \"Genre\",\r\n        colorOfTitleBar: \"#7972C5\",\r\n      };\r\n    case Actions.CHANGE_MAIN_CONTENTS_MODE_TO_SEARCH:\r\n      return {\r\n        ...state,\r\n        mainContentsModeIdx: state.mainContentsModeIdx,\r\n        searchBarOnOff: action.payload.searchBarOnOff,\r\n      };\r\n    case Actions.SET_API_ENTRACE_CODE:\r\n      return { ...state, entraceCode: action.payload.apiEntraceCode };\r\n    case Actions.SET_SEARCH_RESULT:\r\n      return {\r\n        ...state,\r\n        searchResult: action.payload.searchResult,\r\n      };\r\n    case Actions.SET_SEARCH_ENTER_ACTIVATED:\r\n      return {\r\n        ...state,\r\n        mainContentsModeIdx: 3,\r\n        searchBarEnterOnOff: !state.searchBarEnterOnOff,\r\n        nameOfTitle: `search result : ${state.searchResult}`,\r\n        colorOfTitleBar: \"#D96BC1\",\r\n        searchBarOnOff: false,\r\n      };\r\n    case Actions.SET_TRACK_LIST:\r\n      return {\r\n        ...state,\r\n        trackList: action.payload.trackList,\r\n      };\r\n    case Actions.SET_ACCEES_TOKEN_NOW:\r\n      return {\r\n        ...state,\r\n        accessTokenNow: action.payload.accessTokenNow,\r\n      };\r\n    case Actions.CHOICE_MUSIC_GENRE:\r\n      return {\r\n        ...state,\r\n        selectedMusicGenre: action.payload.genre,\r\n        mainContentsModeIdx: 2,\r\n        nameOfTitle: action.payload.nameOfTitle,\r\n        colorOfTitleBar: action.payload.colorOfTitleBar,\r\n      };\r\n  }\r\n  return state;\r\n}\r\n\r\nexport default reducer;\r\n","import { combineReducers, createStore } from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport Actions from \"../../redux/actions\";\r\nimport { GlobalState, Music } from \"../../redux/reducer\";\r\nimport OnOutsiceClick from \"react-outclick\";\r\n\r\nconst NavbarWrap = styled.div`\r\n  width: 100%;\r\n  height: 10vh;\r\n  min-height: 60px;\r\n  /* position: absolute; */\r\n  /* top: 0; */\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst NavbarMenusWrap = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: 560px;\r\n  height: 30px;\r\n  @media (max-width: 750px) {\r\n    width: 200px;\r\n  }\r\n`;\r\n\r\nconst NavbarMenu = styled.i`\r\n  font-size: 25px;\r\n  line-height: 30px;\r\n  color: #fff;\r\n  cursor: pointer;\r\n  transition: all 300ms ease;\r\n\r\n  @media (max-width: 750px) {\r\n    font-size: 20px;\r\n  }\r\n  @media (max-width: 350px) {\r\n    font-size: 15px;\r\n  }\r\n\r\n  &:hover {\r\n    /* color: red; */\r\n    transform: scale(1.2) rotate(-30deg);\r\n  }\r\n`;\r\n\r\nconst NavbarSearchBarWrap = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 300px;\r\n  height: 30px;\r\n\r\n  @media (max-width: 750px) {\r\n    width: 200px;\r\n  }\r\n`;\r\n\r\nconst NavbarSearchBarInput = styled.input`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nconst NavbarMenus = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <NavbarMenusWrap>\r\n      <NavbarMenu\r\n        className=\"fas fa-home\"\r\n        onClick={() => {\r\n          dispatch({\r\n            type: Actions.CHANGE_MAIN_CONTENTS_MODE_TO_MAIN,\r\n          });\r\n        }}\r\n      />\r\n      <NavbarMenu\r\n        className=\"fas fa-chart-bar\"\r\n        onClick={() => {\r\n          dispatch({\r\n            type: Actions.CHANGE_MAIN_CONTENTS_MODE_TO_GENRE,\r\n          });\r\n        }}\r\n      />\r\n      {/* <NavbarMenu\r\n        className=\"fas fa-list-alt\"\r\n        onClick={() => {\r\n          dispatch({\r\n            type: Actions.CHANGE_MAIN_CONTENTS_MODE_TO_MYLIST,\r\n          });\r\n        }}\r\n      /> */}\r\n      <NavbarMenu\r\n        className=\"fas fa-search\"\r\n        onClick={() => {\r\n          dispatch({\r\n            type: Actions.CHANGE_MAIN_CONTENTS_MODE_TO_SEARCH,\r\n            payload: { searchBarOnOff: true },\r\n          });\r\n        }}\r\n      />\r\n    </NavbarMenusWrap>\r\n  );\r\n};\r\n\r\nconst NavbarSearchBar = () => {\r\n  // const [inputText, setInputText] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <NavbarSearchBarWrap>\r\n      <NavbarSearchBarInput\r\n        onChange={(e) => {\r\n          dispatch({\r\n            type: Actions.SET_SEARCH_RESULT,\r\n            payload: { searchResult: e.target.value },\r\n          });\r\n        }}\r\n        onKeyDown={(e) => {\r\n          if (e.key === \"Enter\") {\r\n            dispatch({\r\n              type: Actions.SET_SEARCH_ENTER_ACTIVATED,\r\n            });\r\n          }\r\n        }}\r\n      />\r\n    </NavbarSearchBarWrap>\r\n  );\r\n};\r\n\r\nexport const Navbar = () => {\r\n  // const [a, b] = useSelector<GlobalState, [string, number]>((state) => [\r\n  //   state.a,\r\n  //   state.b,\r\n  // ]);\r\n  const searchBarOnOff = useSelector<GlobalState, boolean>(\r\n    (state) => state.searchBarOnOff\r\n  );\r\n  const dispatch = useDispatch();\r\n  return searchBarOnOff ? (\r\n    <NavbarWrap>\r\n      <OnOutsiceClick\r\n        onOutsideClick={() => {\r\n          dispatch({\r\n            type: Actions.CHANGE_MAIN_CONTENTS_MODE_TO_SEARCH,\r\n            payload: { searchBarOnOff: false },\r\n          });\r\n        }}\r\n      >\r\n        <NavbarSearchBar />\r\n      </OnOutsiceClick>\r\n    </NavbarWrap>\r\n  ) : (\r\n    <NavbarWrap>\r\n      <NavbarMenus />\r\n    </NavbarWrap>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { GlobalState } from \"../../redux/reducer\";\r\nimport Actions from \"../../redux/actions\";\r\n\r\nconst MainGenreWrap = styled.div`\r\n  width: 100%;\r\n  height: 80%;\r\n  grid-template-columns: 1fr 1fr 1fr;\r\n\r\n  @media (max-width: 750px) {\r\n    grid-template-columns: 1fr 1fr;\r\n  }\r\n`;\r\n\r\nconst MainGenreList = styled.div`\r\n  width: 200px;\r\n  height: 50px;\r\n  background-color: #1b1b1b;\r\n  color: #fff;\r\n  /* margin-right: 50px; */\r\n  text-align: center;\r\n  line-height: 50px;\r\n  font-size: 16px;\r\n\r\n  cursor: pointer;\r\n  @media (max-width: 750px) {\r\n    width: 130px;\r\n    height: 40px;\r\n    line-height: 40px;\r\n    font-size: 15px;\r\n\r\n    /* margin-right: 30px; */\r\n  }\r\n\r\n  @media (max-width: 350px) {\r\n    width: 100px;\r\n    height: 30px;\r\n    line-height: 30px;\r\n    font-size: 13px;\r\n  }\r\n`;\r\n\r\nconst MainGenreLists = ({ musicGenre }: { musicGenre: string }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <MainGenreList\r\n      onClick={() => {\r\n        // go to Genre music lists\r\n        // console.log(`click genre : ${musicGenre}`);\r\n        dispatch({\r\n          type: Actions.CHOICE_MUSIC_GENRE,\r\n          payload: { genre: musicGenre, nameOfTitle: musicGenre },\r\n        });\r\n      }}\r\n    >\r\n      {musicGenre}\r\n    </MainGenreList>\r\n  );\r\n};\r\n\r\nexport const MainGenre = () => {\r\n  const genreLists = [\r\n    \"k-pop\",\r\n    \"pop\",\r\n    \"j-pop\",\r\n    \"rock\",\r\n    \"classical\",\r\n    \"jazz\",\r\n    \"dance\",\r\n    \"edm\",\r\n    \"acoustic\",\r\n  ];\r\n\r\n  const mainModeIdx = useSelector<GlobalState>(\r\n    (state) => state.mainContentsModeIdx\r\n  );\r\n\r\n  return (\r\n    <MainGenreWrap style={{ display: mainModeIdx === 1 ? \"grid\" : \"none\" }}>\r\n      {genreLists.map((musicGenre) => (\r\n        <MainGenreLists key={musicGenre} musicGenre={musicGenre} />\r\n      ))}\r\n    </MainGenreWrap>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\nimport { GlobalState, Music } from \"../../redux/reducer\";\r\n\r\nconst MainMusicList = styled.div`\r\n  width: 100%;\r\n  height: 80px;\r\n  display: flex;\r\n  position: relative;\r\n  align-items: center;\r\n  margin-right: 30px;\r\n  @media (max-width: 750px) {\r\n    width: 100%;\r\n    height: 40px;\r\n    margin-bottom: 20px;\r\n    margin-right: 0%;\r\n  }\r\n  @media (max-width: 350px) {\r\n    height: 35px;\r\n    margin-bottom: 15px;\r\n  }\r\n`;\r\nconst MainMusicListImg = styled.img`\r\n  width: 50px;\r\n  height: 50px;\r\n  margin-right: 20px;\r\n  @media (max-width: 750px) {\r\n    width: 40px;\r\n    height: 40px;\r\n    margin-right: 20px;\r\n  }\r\n  @media (max-width: 350px) {\r\n    width: 35px;\r\n    height: 35px;\r\n    margin-right: 15px;\r\n  }\r\n`;\r\nconst MainMusicListSubscription = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n`;\r\n\r\nconst MainMusicListTitle = styled.div`\r\n  color: #fff;\r\n  font-size: 18px;\r\n  /* width: 300px; */\r\n\r\n  width: 200px;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n\r\n  @media (max-width: 750px) {\r\n    font-size: 15px;\r\n    width: 220px;\r\n  }\r\n\r\n  @media (max-width: 350px) {\r\n    font-size: 13px;\r\n    width: 150px;\r\n  }\r\n`;\r\nconst MainMusicListArtistNAlbum = styled.div`\r\n  color: #cacaca;\r\n  font-size: 18px;\r\n\r\n  width: 200px;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  /* width: 100%; */\r\n  @media (max-width: 750px) {\r\n    font-size: 15px;\r\n    width: 220px;\r\n  }\r\n\r\n  @media (max-width: 350px) {\r\n    font-size: 13px;\r\n    width: 150px;\r\n  }\r\n`;\r\n\r\nexport const MainMusicLists = ({ track }: { track: Music }) => {\r\n  return (\r\n    <MainMusicList>\r\n      <MainMusicListImg src={track.albumImg} />\r\n      <MainMusicListSubscription>\r\n        <MainMusicListTitle>{track.title}</MainMusicListTitle>\r\n        <MainMusicListArtistNAlbum>\r\n          {track.artist} / {track.album}\r\n        </MainMusicListArtistNAlbum>\r\n      </MainMusicListSubscription>\r\n    </MainMusicList>\r\n  );\r\n};\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { GlobalState, Music } from \"../../redux/reducer\";\r\nimport SpotifyWebApi from \"spotify-web-api-node\";\r\n\r\nimport useAuth from \"../utils/useAuth\";\r\nimport Actions from \"../../redux/actions\";\r\nimport { MainMusicLists } from \"./main-tracklist\";\r\n\r\nconst MainMusicListWrap = styled.div`\r\n  width: 100%;\r\n  height: 80%;\r\n\r\n  grid-template-columns: repeat(auto-fill, minmax(30%, auto));\r\n  /* grid-template-rows: repeat(auto-fill, minmax(20%, auto)); */\r\n  /* grid-template-rows: 1fr; */\r\n\r\n  @media (max-width: 1400px) {\r\n    grid-template-columns: repeat(auto-fill, minmax(50%, auto));\r\n  }\r\n\r\n  @media (max-width: 750px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  overflow: scroll;\r\n  &::-webkit-scrollbar {\r\n    width: 8px;\r\n    height: 0px;\r\n    background: rgba(255, 255, 255, 0.4);\r\n  }\r\n  &::-webkit-scrollbar-thumb {\r\n    background-color: rgba(0, 0, 0, 0.3);\r\n  }\r\n`;\r\n\r\nexport const MainTrackListOnMode = () => {\r\n  const dispatch = useDispatch();\r\n  const [\r\n    entraceCode,\r\n    selectedMusicGenre,\r\n    searchResult,\r\n    searchBarEnterOnOff,\r\n    trackList,\r\n    mainModeIdx,\r\n    spotifyApi,\r\n  ] = useSelector<\r\n    GlobalState,\r\n    [string, string, string, boolean, Music[], number, SpotifyWebApi]\r\n  >((state) => [\r\n    state.entraceCode,\r\n    state.selectedMusicGenre,\r\n    state.searchResult,\r\n    state.searchBarEnterOnOff,\r\n    state.trackList,\r\n    state.mainContentsModeIdx,\r\n    state.spotifyApi,\r\n  ]);\r\n\r\n  const accessToken = useAuth(entraceCode);\r\n\r\n  // console.log(accessToken);\r\n  useEffect(() => {\r\n    if (!accessToken) return;\r\n    spotifyApi.setAccessToken(accessToken);\r\n    dispatch({\r\n      type: Actions.SET_ACCEES_TOKEN_NOW,\r\n      payload: { accessTokenNow: accessToken },\r\n    });\r\n  }, [accessToken]);\r\n\r\n  useEffect(() => {\r\n    if (!searchResult) return;\r\n    if (mainModeIdx !== 3) return;\r\n\r\n    spotifyApi.searchTracks(searchResult).then((res) => {\r\n      const list = res.body.tracks?.items.map((track) => {\r\n        return {\r\n          title: track.name,\r\n          artist: track.artists[0].name,\r\n          album: track.album.name,\r\n          albumImg: track.album.images[0].url,\r\n          popularity: track.popularity,\r\n          url: track.uri,\r\n        };\r\n      }); // ?를 추가하는거는?? undefined가 있을수도 있다는 의미??\r\n      dispatch({\r\n        type: Actions.SET_TRACK_LIST,\r\n        payload: { trackList: list ? list : [] },\r\n      });\r\n    });\r\n  }, [searchBarEnterOnOff]);\r\n\r\n  useEffect(() => {\r\n    if (!accessToken) return;\r\n    if (mainModeIdx === 1 || mainModeIdx === 3) return;\r\n\r\n    // 검색을 하고나서 다시 여기를 했을 때 잘 안먹히네...??\r\n\r\n    spotifyApi\r\n      .getRecommendations({\r\n        seed_genres: [`${selectedMusicGenre}`],\r\n      })\r\n      .then((res) => {\r\n        const list = (res.body.tracks as SpotifyApi.TrackObjectFull[]).map(\r\n          (track) => {\r\n            // console.log(track.album.images[0].url);\r\n            return {\r\n              title: track.name,\r\n              artist: track.artists[0].name,\r\n              album: track.album.name,\r\n              albumImg: track.album.images[0].url\r\n                ? track.album.images[0].url\r\n                : \"\",\r\n              popularity: track.popularity,\r\n              url: track.uri,\r\n            };\r\n          }\r\n        ); // ?를 추가하는거는?? undefined가 있을수도 있다는 의미??\r\n        // setSearchResults(list ? list : []);\r\n        dispatch({\r\n          type: Actions.SET_TRACK_LIST,\r\n          payload: { trackList: list ? list : [] },\r\n        });\r\n      });\r\n  }, [selectedMusicGenre, accessToken, mainModeIdx]);\r\n\r\n  useEffect(() => {\r\n    const resetMusicListScroll = document.getElementById(\"musicList\");\r\n    if (resetMusicListScroll) resetMusicListScroll.scrollTop = 0;\r\n    console.log(mainModeIdx);\r\n  }, [selectedMusicGenre, mainModeIdx]);\r\n\r\n  return (\r\n    <MainMusicListWrap\r\n      id=\"musicList\"\r\n      style={{\r\n        display: mainModeIdx !== 1 ? \"grid\" : \"none\",\r\n      }}\r\n    >\r\n      {trackList\r\n        .sort((a, b) => {\r\n          return b.popularity - a.popularity;\r\n        })\r\n        .map((track) => (\r\n          <MainMusicLists\r\n            key={track.title + track.artist + track.album + track.url}\r\n            track={track}\r\n          />\r\n        ))}\r\n    </MainMusicListWrap>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Actions from \"../../redux/actions\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nexport default function useAuth(code: string) {\r\n  const [accessToken, setAcceessToken] = useState(\"\");\r\n  const [expiresIn, setExpiresIn] = useState(0);\r\n\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    axios\r\n      // .post(\"http://localhost:3001/login\")\r\n      .post(\"https://musicdata.link/login\")\r\n      .then((res) => {\r\n        // console.log(res.data);\r\n        setAcceessToken(res.data.accessToken);\r\n        setExpiresIn(res.data.expiresIn); // 만료 되는 시간에 맞춰서 갱신\r\n      })\r\n      .catch(() => {\r\n        dispatch({\r\n          type: Actions.SET_API_ENTRACE_CODE,\r\n          payload: { apiEntraceCode: \"\" },\r\n        });\r\n        window.location.href = \"/\";\r\n      });\r\n  }, [code]);\r\n\r\n  return accessToken;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nconst MainContentsTitle = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 300px;\r\n  height: 60px;\r\n  margin-bottom: 10px;\r\n  @media (max-width: 750px) {\r\n    width: 280px;\r\n    height: 40px;\r\n    margin-bottom: 35px;\r\n  }\r\n\r\n  @media (max-width: 350px) {\r\n    width: 250px;\r\n\r\n    margin-bottom: 20px;\r\n  }\r\n`;\r\n\r\nconst MainContentsTitleText = styled.div`\r\n  color: #fff;\r\n  font-size: 25px;\r\n  @media (max-width: 750px) {\r\n    font-size: 20px;\r\n  }\r\n\r\n  @media (max-width: 350px) {\r\n    font-size: 18px;\r\n  }\r\n`;\r\n\r\nconst MainContentsTitleUnderbar = styled.div`\r\n  width: 70%;\r\n  height: 4px;\r\n\r\n  @media (max-width: 750px) {\r\n    height: 3px;\r\n    width: 60%;\r\n  }\r\n\r\n  @media (max-width: 350px) {\r\n    width: 50%;\r\n    height: 2px;\r\n  }\r\n`;\r\n\r\nexport const Maintitle = ({\r\n  title,\r\n  barColor,\r\n}: {\r\n  title: string;\r\n  barColor: string;\r\n}) => {\r\n  return (\r\n    <MainContentsTitle>\r\n      <MainContentsTitleText>{title}</MainContentsTitleText>\r\n      <MainContentsTitleUnderbar style={{ backgroundColor: `${barColor}` }} />\r\n    </MainContentsTitle>\r\n  );\r\n};\r\n","import { MainGenre } from \"./main-genre\";\r\nimport { MainTrackListOnMode } from \"./main-trackListOnMode\";\r\nimport { Maintitle } from \"./main-title\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { GlobalState } from \"../../redux/reducer\";\r\n\r\nconst MainWrap = styled.div`\r\n  width: 100%;\r\n  height: 80vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 0 20px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst MainContentsWrap = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 90%;\r\n  height: 80%;\r\n`;\r\n\r\nexport const Main = () => {\r\n  const [nameOfTitle, colorOfTitleBar] = useSelector<\r\n    GlobalState,\r\n    [string, string]\r\n  >((state) => [state.nameOfTitle, state.colorOfTitleBar]);\r\n\r\n  return (\r\n    <MainWrap>\r\n      <MainContentsWrap>\r\n        <Maintitle title={nameOfTitle} barColor={colorOfTitleBar} />\r\n        <MainGenre />\r\n        <MainTrackListOnMode />\r\n      </MainContentsWrap>\r\n    </MainWrap>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Provider, useSelector } from \"react-redux\";\r\nimport store from \"./redux/index\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { Navbar } from \"./components/navbar/navbar\";\r\nimport { Main } from \"./components/main/main\";\r\n\r\nconst BackgroundWrap = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  /* position: fixed; // 음... 이전에 어떻게 했지?? */\r\n  background: linear-gradient(\r\n    90deg,\r\n    #38adae -1.77%,\r\n    #cd295a 103.5%,\r\n    rgba(254, 144, 175, 0) 103.51%\r\n  );\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <BackgroundWrap>\r\n        <Navbar />\r\n        <Main />\r\n      </BackgroundWrap>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}